#!/usr/bin/env python

#
# Generated Flask routing module for SNAP microservice framework
#



from flask import Flask, request, Response
import snap
import core
import json
import argparse

{%- if transform_module %}
import {{ transform_module }}
{%- endif %}

app = snap.setup(Flask(__name__))
logger = app.logger
xformer = core.Transformer(app.config.get('services'))



#_snap_transforms

{% for f in transform_functions %}
def {{ f }}(input_data, service_objects):
    raise snap.TransformNotImplementedException('{{f}}')
{% endfor %}

#_


#_snap_exception_handlers

xformer.register_error_code(snap.NullTransformInputDataException, snap.HTTP_BAD_REQUEST)
xformer.register_error_code(snap.MissingInputFieldException, snap.HTTP_BAD_REQUEST)
xformer.register_error_code(snap.TransformNotImplementedException, snap.HTTP_NOT_IMPLEMENTED)

#_



#_snap_data_shapes

{% for transform in transforms.values() %}
{{ transform.input_shape.name }} = core.InputShape()
{%- for field in transform.input_shape.fields %}
{{ transform.input_shape.name }}.add_field('{{ field.name }}', {{ field.is_required }})
{%- endfor %}
{% endfor %}

#_


#_snap_transform_loading

{%- for transform in transforms.values() %}
xformer.register_transform('{{transform.name}}', {{ transform.input_shape.name }}, {{ transform.function_name }}, '{{ transform.output_type }}')
{%- endfor %}

#_


{% for t in transforms.values() %}
@app.route('{{ t.route }}', methods=[{{ t.methods }}])
def {{t.name}}({{ ','.join(t.route_variables) }}):
    try:
        {%- if t.methods == "'POST'" %}
        transform_status = xformer.transform('{{ t.name }}', request.json)
        {%- elif t.methods == "'GET'" or t.methods == "'DELETE'" %}        
        input_data = {}
        input_data.update(request.args)
        {%- for route_variable in t.route_variables %}        
        input_data['{{ route_variable }}'] = {{ route_variable }}
        {%- endfor %}
        
        transform_status = xformer.transform('{{ t.name }}', core.convert_multidict(input_data))
        {%- else %}
        {%- endif %}        
        output_mimetype = xformer.target_mimetype_for_transform('{{ t.name }}')

        if transform_status.ok:
            return Response(transform_status.output_data, status=snap.HTTP_OK, mimetype=output_mimetype)
        return Response(json.dumps(transform_status.user_data), 
                        status=transform_status.get_error_code() or snap.HTTP_DEFAULT_ERRORCODE, 
                        mimetype=output_mimetype) 
    except Exception, err:
        logger.error("Exception thrown: ", exc_info=1)        
        raise err

{% endfor %}



if __name__ == '__main__':
    '''If we are loading from command line,
    run the Flask app explicitly
    '''
    port = 5000
    app.run(host='0.0.0.0', port=port)


