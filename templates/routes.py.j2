#!/usr/bin/env python

#
# Generated Flask routing module for SNAP microservice framework
#



from flask import Flask, request, Response
import snap


snap.setup(app)
logger = snap.logger
xformer = snap.xformer


{% for t in transforms %}
def {{t}}(input_data, service_objects):
    raise snap.TransformNotImplementedException('{{t}}')
{% endfor %}


xformer.register_error_code(snap.NullTransformInputDataException, snap.HTTP_BAD_REQUEST)
xformer.register_error_code(snap.MissingInputFieldException, snap.HTTP_BAD_REQUEST)
xformer.register_error_code(snap.TransformNotImplementedException, snap.HTTP_NOT_IMPLEMENTED)


{% for r in routes.values() %}
@app.route('{{ r.path }}', methods=[{{ r.methods }}])
def {{r.name}}():
    try:
        {%- if r.methods == "'POST'" %}
        transform_status = xformer.transform('{{ r.name }}', request.json)
        {%- elif r.methods == "'GET'" or r.methods == "'DELETE'" %}        
        input_data = {}
        input_data.update(request.args)
        {%- for path_variable in r.path_variables %}        
        input_data['{{path_variable}}'] = {{ path_variable }}
        {%- endfor %}
        
        transform_status = xformer.transform('{{ r.name }}', convert_multidict(input_data))
        {%- else %}
        {%- endif %}        
        output_mimetype = xformer.target_mimetype_for_transform('{{ r.name }}')

        if transform_status.ok:
            return Response(transform_status.output_data, status=HTTP_OK, mimetype=output_mimetype)
        return Response(json.dumps(transform_status.user_data), status=transform_status.get_error_code() or HTTP_DEFAULT_ERRORCODE, mimetype=output_mimetype) 
    except Exception, err:
        logger.error("Exception thrown: ", exc_info=1)        
        raise err

{% endfor %}


